from flask import Flask, request, jsonify
import joblib
import pandas as pd
from flask_cors import CORS
import shap

app = Flask(__name__)
CORS(app)  # allow requests from React frontend

# ===== Load trained pipeline model =====
MODEL_PATH = "trained_pipelineV.joblib"  # update with your file name
try:
    model = joblib.load(MODEL_PATH)
    print(f"✅ Model loaded from {MODEL_PATH}")
except Exception as e:
    print(f"❌ Failed to load model: {e}")
    raise

@app.route("/predict", methods=["POST"])
def predict():
    try:
        data = request.get_json()

        # Extract inputs from frontend
        district = data.get("district")
        mandal = data.get("mandal")
        rbk = data.get("rbk")
        season = data.get("season")
        qty = data.get("qty")
        farmers = data.get("farmers")

        # Create DataFrame for prediction
        input_df = pd.DataFrame([{
            "District": district,
            "Mandal": mandal,
            "RBK": rbk,
            "Season": season,
            "QTY_MTs": qty,
            "No_Of_Farmers": farmers
        }])

        # Predict amount
        predicted_amount = model.predict(input_df)[0]

        # ===== SHAP Feature Importance =====
        try:
            explainer = shap.Explainer(model)
            shap_values = explainer(input_df)
            feature_contributions = {
                input_df.columns[i]: float(shap_values.values[0][i])
                for i in range(len(input_df.columns))
            }
        except Exception as e:
            feature_contributions = {}
            print("⚠ SHAP calculation failed:", e)

        return jsonify({
            "predicted_amount": float(predicted_amount),
            "shap_values": feature_contributions
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500


if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5000)
